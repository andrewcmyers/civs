#!/usr/bin/env perl -I/Users/andru/civs/cgi-bin

use strict;
use warnings;

use DB_File;
use election_utils qw(:DEFAULT);

sub usage {
    print STDERR "Usage: tabulate [-A] [-m <minsize] [--anon] [-a <algorithm>] <election_dir> ...\n";
    exit 1;
}

my $dump_all;
my $min_ballots = 0;
my $include_tests;
my $election_dir;
my $verbose;
my $anonymize;
my @algorithms;

while ($ARGV[0] =~ m/^-/) {
    if ($ARGV[0] eq '-A') {
        $dump_all = 1;
        shift @ARGV;
    } elsif ($ARGV[0] eq '-m') {
        shift @ARGV;
        $min_ballots = shift @ARGV;
    } elsif ($ARGV[0] eq '-t') {
        shift @ARGV;
        $include_tests = 1;
    } elsif ($ARGV[0] eq '-v') {
        shift @ARGV;
        $verbose = 1;
    } elsif ($ARGV[0] eq '-a') {
        shift @ARGV;
        push @algorithms, shift @ARGV;
    } elsif ($ARGV[0] eq '--anon') {
        shift @ARGV;
        $anonymize = 1;
    } else {
        usage
    }
}

my @elections;
my $elections_dir;

my $indent = 0;
sub begin {
    $indent++;
    if ($#_ >= 0) {
        foreach my $x (@_) {
            print $x
        }
        print "\n", " " x ($indent * $tabstop);
    }
}
sub newline {
    print "\n", " " x ($indent * $tabstop);
}
sub end {
    $indent--;
    if ($#_ >= 0) {
        newline;
        print $_[0];
    }
}
sub item {
    my $lines = shift @_;
    if ($lines > 0) {
        print ",";
        newline;
    }
    foreach my $x (@_) {
        print $x;
    }
}

if ($dump_all) {
    begin "[";
}

if (!$dump_all) {
    @elections = @ARGV;
} else {
    my $dir = shift @ARGV;
    $dir || usage;
    $elections_dir = "$dir/";
    if (!opendir(ELECTIONS, $dir)) {
        print STDERR "Cannot open directory $dir: $!\n";
        exit 1;
    }
    while (readdir ELECTIONS) {
        if ($_ =~ m/^E_/) {
            push @elections, $elections_dir . $_;
        }
    }
    closedir ELECTIONS;
    # print "Scanning: ", join ", ", @elections, "\n";
}

foreach my $algorithm (@algorithms) {
    require "$algorithm.pm";
}

my $tie = "=";
my $cr = "\n";
my $condorcet_winner;
my $weak_cw;
my %edata, my %vdata;
my (@matrix, @closure_matrix, @choice_rank);

sub name {
    my $i = shift;
    $anonymize ? $i : $choices[$i]
}

foreach $election_dir (@elections) {
    if ($verbose) {
        print STDERR $election_dir, "\n";
    }

    my $election_data = $election_dir."/election_data";
    my $vote_data = $election_dir."/vote_data";

    if (! -r $election_data) {
        # print STDERR "Cannot access election data at $election_data\n";
        next
    }
    if (! -r $vote_data) {
        # print STDERR "Cannot access ballot data at $vote_data\n";
        next
    }
    tie %edata, "DB_File", $election_data, O_RDONLY, 0777, $DB_HASH;
    tie %vdata, "DB_File", $vote_data, O_RDONLY, 0666, $DB_HASH;

    &GetElectionData(\%edata, \%vdata);
    if (!$vdata{'recorded_voters'}) { next }
    my @voters = split /\n/, $vdata{'recorded_voters'};
    if ($#voters+1 < $min_ballots) {
        next
    }
    if ($edata{'external_ballots'} && $edata{'external_ballots'} eq 'yes') {
        if (!$include_tests) { next }
    }
    begin "{";
    item 0, "\"dir\": \"', $election_dir, "\"," if (!$anonymize);
    item 1, "\"ballots\": ($#voters + 1)";
    item 2, "\"num_choices\": ", ($#choices + 1), ",\n";

    &SetupMatrix;
    print "    'Condorcet winner': \"", ($condorcet_winner == -1) ? 'None' : $choices[$condorcet_winner], "\",\n";
    print "    'Weak Condorcet winner': \"", ($weak_cw == -1) ? 'None' : $choices[$weak_cw], "\"\n";
    foreach my $algorithm (@algorithms) {
        &PrintReport($algorithm);
    }
    print "  },\n";
}

if ($dump_all) {
    end "]";
}


# PrintMatrix(n, m, choices, choice_index, zerodot) prints out the matrix with
# the order of the choices defined by choice_index: choice_index[i] is the
# index of the i'th choice (in choices and m).
sub PrintMatrix {
    my $n = $_[0];
    my @m = @{$_[1]};
    my @choices = @{$_[2]};
    my @choice_index = @{$_[3]};
    my $zerodot = $_[4];

    print ',';
    for (my $jj = 0; $jj < $n; $jj++) {
		my $j1 = $jj + 1;
		print $j1, ',';
    }
    for (my $jj = 0; $jj < $n; $jj++) {
	my $j = $choice_index[$jj];
	my $j1 = $jj + 1;
	print "$j1,";
	for (my $kk = 0; $kk < $n; $kk++) {
	    my $k = $choice_index[$kk];
	    if ($j == $k) {
		print "-,";
	    } else {
		my $w = $m[$j][$k];
		my $l = $m[$k][$j];
		my $choicesj = $choices[$j]; $choicesj =~ s/<[^>]*>//gs;
		my $choicesk = $choices[$k]; $choicesk =~ s/<[^>]*>//gs;
		if ($w > $l) {
		    print $w;
		} elsif ($w == $l) {
		    print "$tie,";
		} else {
		    print "$w to $l";
		}
		if ($zerodot && $w == 0) {
		    print '.';
		} else {
		    print $w;
		}
		print $cr;
	    }
	}
    }
}

# Fix a ballot ranking so it is correct for nonproportional computations
sub FixProp {
    if ($proportional eq 'yes' && !$use_combined_ratings) {
        return $num_choices - $_[0];
    } else {
        return $_[0];
    }
}

sub SetupMatrix {
    # Compute condorcet winner and set up (nonproportional) $matrix
    $condorcet_winner = $weak_cw = -1;
    for (my $j = 0; $j < $num_choices; $j++) {
	if ($condorcet_winner < 0) { $condorcet_winner = $j; }
	if ($weak_cw < 0) { $weak_cw = $j; }
	for (my $k = 0; $k < $num_choices; $k++) {
	    my $n; $n = $vdata{"$j.$k"} or $n = 0;
            $n = &FixProp($n);
	    $matrix[$j][$k] = $n;
	    if ($j != $k) {
		my $m; $m = $vdata{"$k.$j"} or $m = 0;
                $m = &FixProp($m);
		if ($n <= $m && $condorcet_winner == $j) {
                    $condorcet_winner = -1; # can't be this one
		}
		if ($n < $m && $weak_cw == $j) {
                    $weak_cw = -1; # can't be this one
		}
	    }
	}
    }
}

sub PrintRanking {
    my @result = @{$_[0]};
    my @matrix = @{$_[1]};
    my $had_tie = 0;
    my $j = 0;
    my $num_seen = 0;
    for (my $rank = 0; $rank <= $#result; $rank++) {
	my @winner = @{$result[$rank]};
	# find the explanatory defeat
	printf '%4d. ', $j+1;
	my $ranksize = $#winner + 1;
        my $tie;
	if ($num_seen < $num_winners &&
	    $num_seen + $ranksize > $num_winners) {
	    $tie = 1;
	    $had_tie = 1;
	} else {
	    $tie = 0;
	}
	for (my $i = 0; $i <= $#winner; $i++) {
	    if ($i > 0) { print $cr, '      '; }
            print &name($winner[$i]);
	    $choice_rank[$winner[$i]] = $j++;
	}
	$num_seen += $#winner + 1;
	print $cr;
    }
}

sub details_bookmark {
    return a({-name=>"details"}, "");
}

sub Log {
    print STDERR @_, "\n";
}

sub MakeChoiceIndex {
    my @rankings = @{$_[0]};
    my $j = 0;
    my @choice_index = ();
    my @choice_rank = ();
    for (my $rank = 0; $rank <= $#rankings; $rank++) {
	my @winner = @{$rankings[$rank]};
	for (my $i = 0; $i <= $#winner; $i++) {
	    $choice_index[$j] = $winner[$i];
	    $choice_rank[$winner[$i]] = $j + 1;
	    $j++;
	}
    }
    return ([@choice_index], [@choice_rank]);
}

sub ProcessBallots {
    my @voters = @{$_[0]};
    my @ballots = ();
    foreach my $voter_key (@voters) {
	my $ballot = $vdata{$voter_key};
	if (!defined($ballot)) {
	    &Log("Lost ballot for voter key $voter_key?");
	} else {
	    my @row = split /,/, $ballot;
	    push @ballots, \@row;
	}
    }
    return \@ballots;
}

sub PrintReport {
    no strict 'refs';
    (my $module) = @_;
    my @voters = split /\n/, $vdata{'recorded_voters'};
    my $bref = &ProcessBallots(\@voters);
    my $rank_candidates = $module.'::rank_candidates';
    my $print_details = $module.'::print_details';

#   if (!$algorithm_modules{$module}) {
#     print RESULTS p("Algorithm module $module for algorithm $algorithm not valid");
#     print RESULTS '</div>';
#     return;
#   }

    (my $rref, my $log) =
	&$rank_candidates($num_choices, \@matrix, $bref, \@choices);

    (my $ciref, my $crref) = &MakeChoiceIndex($rref);

    &PrintRanking($rref, \@matrix);
    # &PrintMatrix($num_choices, \@matrix, \@choices, $ciref, 0);
    # &$print_details($log, $num_choices, \@choices, $ciref);

}
